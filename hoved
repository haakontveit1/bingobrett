import sqlite3
import pandas as pd
import streamlit as st
import hashlib

def initialize_session_state():
    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False
    if 'username' not in st.session_state:
        st.session_state.username = ""

# Function to get the leaderboard data
def get_leaderboard():
    # Simulating a database call
    return [("Borge", 5), ("Haakon", 10), ("Emil", 7)]

# Function to generate a clickable profile link that opens in the same tab
def profile_link(username):
    return f'<a href="/?user={username}">{username}</a>'

# Display the leaderboard with clickable profile links
def display_leaderboard():
    st.header("Leaderboard")
    leaderboard = get_leaderboard()

    html = "<table style='width:70%; border-collapse: collapse;'>"
    html += "<tr><th>Username</th><th>Challenges Completed</th></tr>"
    for username, challenges_completed in leaderboard:
        html += f"<tr><td><a href='/?user={username}' target='_self'>{username}</a></td><td>{challenges_completed}</td></tr>"
    html += "</table>"
    st.markdown(html, unsafe_allow_html=True)

def login_form():
    username = st.text_input("Username", key="login_username")
    password = st.text_input("Password", type="password", key="login_password")

    if st.button("Login"):
        if username in ["Borge", "Haakon", "Emil"]:  # Simulated check for valid users
            st.session_state.logged_in = True
            st.session_state.username = username
            st.experimental_rerun()
        else:
            st.error("Invalid credentials")


# Function to generate the custom 7x7 table
def generate_table():
    data = [
        #challenges (oppdateres)
    ]
    table_df = pd.DataFrame([data[i:i+7] for i in range(0, 49, 7)])
    return table_df

# Display the 7x7 table on the profile page without index or headers
# Display the 7x7 table on the profile page without index or headers
def display_7x7_table(table_df):
    html = "<table style='width:70%; border-collapse: collapse;'>"
    for row in table_df.values:
        html += "<tr>"
        for cell in row:
            html += f"<td style='padding: 10px; border: 1px solid black;'>{cell}</td>"
        html += "</tr>"
    html += "</table>"
    st.markdown(html, unsafe_allow_html=True)

def profile_page(username):
    initialize_session_state()

    if not st.session_state.get('logged_in', False):
        st.error("You are not logged in.")
        login_form()
        return

    if username == st.session_state.username:
        st.header("Your Profile")
        st.write("Editor")
        table_header = "Your 7x7 table"
    else:
        st.header(f"Profile of {username}")
        st.write("Viewer")
        table_header = f"{username}'s table"

    st.write(f"Here's {table_header}:")

    table_df = generate_table()
    display_7x7_table(table_df)

    st.write("*Etter soloppgang")
    st.write("**Ikke lov å sove i egen seng eller kjæresten sin seng")
    st.write("***Du trenger ikke få den opp")
    st.write("****Lov å alliere seg")
    st.write("*****Må dokumenteres med bilde")
    st.write("******Må dokumenteres med bilde med dagens avis")

    if st.button("Back to Leaderboard"):
        st.experimental_set_query_params()  # Clear the query parameters
        st.experimental_rerun()


def check_login():
    initialize_session_state()

    col1, col2 = st.columns([2, 1])

    with col2:
        if st.session_state.logged_in:
            st.write(f"Logged in as {st.session_state.username}")

            if st.button("Your Profile"):
                st.experimental_set_query_params(user=st.session_state.username)
                st.experimental_rerun()

            if st.button("Logout"):
                st.session_state.logged_in = False
                st.session_state.username = ""
                st.experimental_set_query_params()  # Clear query parameters on logout
                st.experimental_rerun()
        else:
            login_form()

    with col1:
        if st.session_state.logged_in:
            display_leaderboard()
            if st.button("Complete a Challenge"):
                complete_challenge(st.session_state.username)
                st.success("Challenge completed!")
                st.experimental_rerun()
        else:
            login_form()




def alter_users_table():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    try:
        c.execute('ALTER TABLE users ADD COLUMN challenges_completed INTEGER DEFAULT 0')
        conn.commit()
    except sqlite3.OperationalError as e:
        if "duplicate column name" in str(e):
            st.warning("Column already exists, no need to alter.")
        else:
            st.error(f"An error occurred: {e}")
    finally:
        conn.close()

#alter_users_table()


def create_users_table():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL UNIQUE,
            password TEXT NOT NULL,
            challenges_completed INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

#create_users_table()

# Hashing passwords for security
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# Database connection
def connect_db():
    conn = sqlite3.connect('users.db')
    return conn

# Register a new user
def register_user(username, password):
    conn = connect_db()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO users (username, password, challenges_completed) VALUES (?, ?, 0)', (username, hash_password(password)))
        conn.commit()
        st.success("Account created successfully!")
    except sqlite3.IntegrityError:
        st.error("Username already exists. Please choose a different username.")
    finally:
        conn.close()

# Validate user login
def login_user(username, password):
    conn = connect_db()
    c = conn.cursor()
    c.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, hash_password(password)))
    user = c.fetchone()
    conn.close()
    return user

            
def complete_challenge(username):
    conn = connect_db()
    c = conn.cursor()
    c.execute('UPDATE users SET challenges_completed = challenges_completed + 1 WHERE username = ?', (username,))
    conn.commit()


# Main function to run the app
def main():
    st.write(f"Current query params: {st.experimental_get_query_params()}")
    st.write(f"Session state: logged_in={st.session_state.get('logged_in')}, username={st.session_state.get('username')}")

    query_params = st.experimental_get_query_params()
    if "user" in query_params:
        profile_page(query_params["user"][0])
    else:
        check_login()

if __name__ == "__main__":
    main()
